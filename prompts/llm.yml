process_input: |
  Input: {{ input_data }}

  Analyze the above input, break it down into action_items to fulfil the overall goal of the input.
  Carefully analyse the input to ensure you have factored it in its entirety.
  Provide a summary and other relevant details structured into the JSON object below.
  Format your response as a JSON object with the following structure:
  {
      "summary": "A brief summary of the input",
      "key_points": ["List of key points"],
      "entities": ["List of important entities mentioned"],
      "sentiment": "Overall sentiment (positive, negative, or neutral)",
      "action_items": ["List of suggested actions based on the input"]
  }
  
  Ensure the response is valid JSON without any additional formatting or code block markers.

construct_json: |
  Given the text below, construct a well-formed JSON object that captures its key information.
  If the text contains any key-value pairs, lists, or structured data, represent them appropriately in the JSON structure.

  Text to parse:
  {{ text }}

  Guidelines:
  - Convert clear key-value pairs into JSON properties
  - Convert lists or enumerations into JSON arrays
  - Convert numeric values to numbers where appropriate
  - Convert boolean-like values (true/false, yes/no) to JSON booleans
  - Maintain nested structures where they appear in the text

  Format your response as a valid JSON object.

finetune_dataset: |
  Based on the following memory items, create a fine-tuning dataset that will help improve the model's performance.
  Each dataset item should include both the input context and the desired output.

  Recent memories:
  {% for memory in memories %}
  - Timestamp: {{ memory.timestamp }}
    Type: {{ memory.type }}
    Content: {{ memory.content }}
  {% endfor %}

  Format the dataset as a JSON array where each item has:
  - 'input': The context or prompt
  - 'output': The expected response
  - 'type': The type of interaction
